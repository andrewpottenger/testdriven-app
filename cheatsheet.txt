# common cli
# build image and run container in background
docker-compose -f docker-compose-dev.yml up -d --build

# Run the tests:
docker-compose -f docker-compose-dev.yml \
run users-service python manage.py test

# Docker
docker-machine ls

# Client

# Run Client React tests with npm
docker-compose -f docker-compose-dev.yml \
run client npm test

# Run Test Coverage for Python
docker-compose -f docker-compose-dev.yml \
run users-service python manage.py cov

For each component, we'll roughly follow these steps:
1. Write a unit test
2. Run the test to ensure it fails
3. Create the component file
4. Add the component
5. Wire up the component to App.jsx, passing down any necessary props
6. Manually test it in the browser
7. Ensure the unit tests pass
8. Write a snapshot test

# Postgres
docker exec -ti $(docker ps -aqf "name=users-db") psql -U postgres -W

# \c users_dev
# select * from users;
# \q

# recreate_db
docker-compose -f docker-compose-dev.yml \
run users-service python manage.py recreate_db

# seed_db
docker-compose -f docker-compose-dev.yml \
run users-service python manage.py seed_db
